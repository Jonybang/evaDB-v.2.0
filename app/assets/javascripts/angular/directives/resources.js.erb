angular.module('app').directive('resources', ['$timeout', '$sce', '$q', 'debounce', function($timeout, $sce, $q, $debounce) {
    return {
        restrict: 'E',
        templateUrl: resourcesHtml,
        scope: {
            //require lists
            resoursable: '=',
            ngModel: '=',
            //require dates
            startDate: '=',
            endDate: '=',
            //sub data
            curTask: '=',
            //callbacks
            ngChange: '&',
            resoursableAdded: '&',
            //flags
            showAll: '=',
            adderDisabled: '=',
            notCurTaskDisabled: '='

        },
        link: function (scope, element){
            var workHours = 8;
            var beginHour = 8;


            scope.select = {};

            var lastTimeStamp = Date.now();
            function getDiffLastTS () {
                var diff = Date.now() - lastTimeStamp;
                lastTimeStamp = Date.now();
                return diff;
            }

            var initResources = $debounce(500, function (){
                if(!scope.resoursable || !scope.resoursable.length)
                    return;
                if(!scope.ngModel || !scope.ngModel.length)
                    return;

                console.log('initResources [start], length: ' + scope.ngModel.length + ' | ' + getDiffLastTS());

                scope.resoursable.forEach(function(obj){
                    obj.resAvaible = false;
                });

                var splited = false;
                scope.ngModel.forEach(function(resource){
                    if(!resource.$id)
                        resource.$id = resource.id;

                    if(!resource.time)
                        resource.time = Math.abs(resource.end_date - resource.begin_date) / 36e5;

                    //убираем ноль чтобы не мешал в инпуте
                    if(!resource.time)
                        resource.time = "";


                    if(!resource.$resoursable){
                        scope.resoursable.some(function(obj){
                            var result = obj.id == resource.resoursable_id && obj.class == resource.resoursable_type;
                            if(result){
                                obj.resAvaible = true;
                                resource.$resoursable = obj;
                            }
                            return result;
                        })
                    } else {
                        resource.$resoursable.resAvaible = true;
                    }
                    if(resource.$resoursable.resAvaible && !resource.$resoursable.inited){
                        $timeout(scope.resoursableAdded, 0);
                        resource.$resoursable.inited = true;
                    }
                    splited = splitResource(resource) || splited;

                    setResStyle(resource);
                });
                console.log('initResources [end], length: ' + scope.ngModel.length + ' | ' + getDiffLastTS());
                console.log(scope.ngModel);
                if(splited){
                    console.log('splited');
                    initResources();
                    return;
                }
                initCalendar();
                initCalendar.flush();

                $q(function(resolve, reject) {
                    //clearResources();
                    resetIds();
                });
            });

            var initCalendar = $debounce(500, function (){
                if(!scope.startDate || !(scope.startDate instanceof Date) ||
                        !scope.endDate || !(scope.endDate instanceof Date) ||
                        !scope.ngModel || !Array.isArray(scope.ngModel))
                    return;

                scope.calendar = [];

                console.log('initCalendar [start], length: ' + scope.ngModel.length + ' | ' + getDiffLastTS());
                var interimDate = angular.copy(scope.startDate);
                while(interimDate <= scope.endDate){
                    var resources = scope.ngModel.filter(function(obj){
                        return obj.begin_date.getDate() == interimDate.getDate();
                    });
                    scope.calendar.push({'date': angular.copy(interimDate), resources: resources});
                    interimDate.setDate(interimDate.getDate() + 1);
                }
                console.log('initCalendar [end], length: ' + scope.ngModel.length + ' | ' + getDiffLastTS());
            });

            scope.$watchCollection('ngModel', initResources);
            scope.$watchCollection('resoursable', initResources);

            scope.$watch('startDate', initCalendar);
            scope.$watch('endDate', initCalendar);
            initResources();

            function splitResource(res){
                var splited = false;
                while(res.time > workHours){
                    splited = true;

                    var newRes = angular.copy(res);

                    newRes.id = null;
                    newRes.$id = getResTempId();

                    res.time = workHours;
                    setResDatesByTime(res, res.begin_date);

                    newRes.time = parseInt(newRes.time) - workHours;
                    newRes.begin_date.setDate(newRes.begin_date.getDate() + 1);
                    newRes.begin_date.setHours(beginHour);
                    setResDatesByTime(newRes, newRes.begin_date);

                    scope.ngModel.push(newRes);
                    res = newRes;
                }
                return splited;
            }

            function clearResources(){
                var emptyResources = scope.ngModel.map(function(obj){
                    if(!obj.time)
                        return obj;
                });

                if(!emptyResources.length)
                    return;

                scope.ngModel.forEach(function(obj){
                    if(obj.time){
                        emptyResources.forEach(function(emptyResource, index){
                            if(emptyResource.begin_date.getDate() == obj.begin_date.getDate()){
                                emptyResources.splice(index, 1);
                                emptyResource._destroy = 1;
                            }
                        });
                    }
                });
            }
            function resetIds (){
                console.log('list before resetIds');
                console.log(scope.ngModel.map(function(obj){
                    return angular.copy(obj);
                }));
                scope.ngModel.forEach(function(resource, res_index){
                    scope.ngModel.forEach(function(obj, obj_index){
                        if(resource.id && resource.id == obj.$id && resource.id != obj.id)
                            obj.$id = getResTempId();
                    });
                });
                console.log('list after resetIds');
                console.log(scope.ngModel);
            }
            scope.isEmptyDate = function(date, resoursable){
                return !date.resources.some(function(obj){
                    return obj.$resoursable
                            && obj.$resoursable.id == resoursable.id
                            && obj.$resoursable.class == resoursable.class
                            && !obj._destroy;
                });
            };

            scope.getTooltip = function(resource){
                var task = (scope.curTask && resource.project_task_id == scope.curTask.id) ? scope.curTask : resource.task;
                if(task && task.name)
                    return $sce.trustAsHtml('<nobr><b>' + (task.project ? task.project.name : task.project_name) + '</b></nobr><br/><nobr>' + task.name + '</nobr>');
            };

            scope.resBlur = function(resources, index){
                setResStyle(resources[index]);
                scope.removeResIfEmpty(resources, index);
                splitResource(resources[index]);
            };

            scope.removeResIfEmpty = function(resources, index){
                var res = resources[index];
                if(res.time)
                    return;

                resources.splice(index, 1);

                scope.ngModel.some(function(obj, index){
                    var result = obj == res;
                    if(result)
                        obj._destroy = 1;

                    return result;
                });
            };

            function setResStyle(resource){
                if(!resource.style)
                    resource.style = {};

                if(!resource.inputStyle)
                    resource.inputStyle = {};

                var width = resource.time * 10;
                resource.style['width'] = (width ? width : 0) + 'px';

                resource.inputStyle['background-color'] = resource.hoursCuted ? '#FAEBCC' : '';
            };
            function setResDatesByTime(resource, begin_date){
                resource.begin_date = begin_date;
                resource.end_date = angular.copy(begin_date).addHours(resource.time);
            }

            scope.resTimeChanged = function(resource, day){
                var nextDay = scope.calendar[scope.calendar.indexOf(day) + 1];
                if(resource.time > workHours && nextDay.resources.length && !scope.isEmptyDate(nextDay, resource.$resoursable)){
                    resource.time = workHours;
                    resource.hoursCuted = true;
                }

                setResStyle(resource);
                setResDatesByTime(resource, day.date);

                $timeout(scope.ngChange, 0);
            };
            scope.resDropped = function(date, res, item){
                scope.leaveAddButton(date, res);
                item.begin_date = date.date;
                item.end_date = angular.copy(date.date).addHours(item.time);

                //востановить связь
                scope.ngModel.some(function(obj, index){
                    var result = obj.$id == item.$id && obj.class == item.class;
                    if(result){
                        item.$resoursable = obj.$resoursable;
                        scope.ngModel[index] = item;
                    }

                    return result;
                });

                $timeout(scope.ngChange, 0);
                return item;
            };
            scope.isResDisable = function(res) {
                if(!scope.curTask)
                    return;

                var res_task_id = res.task ? res.task.id : res.project_task_id;
                if(res_task_id)
                    return res_task_id != scope.curTask.id && scope.notCurTaskDisabled;
            };

            function getResTempId(){
                var newId = 0;
                scope.ngModel.forEach(function(obj){
                    if(obj.id > newId || obj.$id > newId)
                        newId = obj.id || obj.$id;
                });
                return newId + 1;
            }

            scope.addResToList = function(resoursable, date){
                console.log('addResToList [start], length: ' + scope.ngModel.length + ' | ' + getDiffLastTS());
                var addedFromDropDownList = !date;

                if(addedFromDropDownList){
                    date = scope.calendar[0];
                }

                resoursable.resAvaible = true;

                var newRes = {
                    $id: getResTempId(),
                    //$resoursable: resoursable,
                    resoursable_id: resoursable.id,
                    resoursable_type: resoursable.class,
                    begin_date: date.date,
                    end_date: date.date,
                    focus: true
                };
                scope.ngModel.push(newRes);
                date.resources.push(scope.ngModel[scope.ngModel.length - 1]);

                scope.select = {};

                $timeout(scope.ngChange, 0);

                if(addedFromDropDownList){
                    $timeout(scope.resoursableAdded, 0);
                }
                console.log('addResToList [end], length: ' + scope.ngModel.length + ' | ' + getDiffLastTS());
                //initResources();
                //initResources.flush();
            };


            var timer;
            scope.enterAddButton = function(date, res) {
                scope.calendar.forEach(function(_date){
                    _date.hover = false;
                });
                date.timer = res.timer = $timeout(function(){
                    date.hover = res.hover = true;
                }, 400);
            };
            scope.leaveAddButton = function(date, res) {
                $timeout.cancel(date.timer);
                date.hover = res.hover = false;
            };


            Date.prototype.addHours= function(h){
                this.setHours(this.getHours() + parseInt(h));
                return this;
            };
        }
    };
}]);