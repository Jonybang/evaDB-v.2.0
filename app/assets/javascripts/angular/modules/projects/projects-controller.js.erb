/**
 * Created by jonybang on 03.07.15.
 */
'use strict';

var app = angular.module('app.projects');

app.controller('ProjectsIndexCtrl', ['$scope', 'Project', 'User', function($scope, Project, User) {
    //Grab all forums from the server
    User.get_contact().then(function(result){
        $scope.contact = result;
        Project.query({contact_id:result.id}).then(function(projects){
            $scope.projects =projects;
        });
    });

    //Destroy method for deleting a forum
    $scope.destroy = function(index) {

        //Tell the server to remove the object
        Project.remove({id: $scope.projects[index].id}, function() {
            //If successful, remove it from our collection
            $scope.projects.splice(index, 1);
        });
    }
}]);

app.controller('ProjectsCreateCtrl', ['$scope', '$state', 'Project', 'User', function($scope, $state, Project, User) {
    //The save method which is called when the user wants to submit their data
    User.get_contact().then(function(result){
        $scope.contact = result;
    });
    $scope.save = function() {
        $scope.$broadcast('show-errors-check-validity');
        if (!$scope.projectForm.$valid) {
            return;
        }

        $scope.project.contact_id = $scope.contact.id;
        //Create the forum object to send to the back-end
        var project = new Project($scope.project).create();

        //Save the forum object
        project.then(function(response) {

            //Redirect us back to the main page
            $state.go('app.projects.show.tasks.table', {projectId: response.id});

        }, function(response) {

            //Post response objects to the view
            $scope.errors = response.data.errors;
        });
    }
}]);

//A controller to show the forum and all it's glory
app.controller('ProjectsShowCtrl', ['$scope', 'Project', '$state', function($scope, Project, $state) {
    $scope.project = {};
    Project.get($state.params.projectId).then(function(project){
        angular.extend($scope.project, project);
    });

    $scope.tabsData = [
        { route : 'app.projects.show.description', heading : 'Описание' },
        { route : 'app.projects.show.tasks.table', heading : 'Задачи'},
        { route : '#', heading : 'Ресурсы', disabled: true },
        { route : '#', heading : 'Документы', disabled: true },
        { route : '#', heading : 'Метрики', disabled: true },
        { route : '#', heading : 'Инфографика', disabled: true }
    ];
}]);

app.controller('ProjectsDescCtrl', ['$scope', 'Project', '$state', function($scope, Project, $state) {
    //Если после подгрузки контроллера загрузка проекта все еще идет в родительском контроллере
    //то подписываемся на результат загрузки
    if(!$scope.$parent.project.name)
        $scope.project = $scope.$parent.project;
    else
        $scope.project = Project.get({id: $state.params.projectId});
}]);

app.controller('ProjectsTasksCtrl', ['$scope', 'ProjectTask', 'Gantt', 'Helpers', '$state', '$modal', function($scope, ProjectTask, Gantt, Helpers, $state, $modal) {
    $scope.tabsData = [
        { route : 'app.projects.show.tasks.table', heading : 'Таблица' },
        { route : 'app.projects.show.tasks.scheme', heading : 'Схема', disabled: true },
        { route : 'app.projects.show.tasks.map', heading : 'Дорожная карта', disabled: true }
    ];
    var self = this;
    var project_id = $state.params.projectId;
    function getTasks(){
        ProjectTask.query({project_id: project_id}).then(function (tasks) {
            $scope.project_tasks = self.project_tasks = tasks;
        });
    }
    getTasks();

    $scope.destroy = function(task) {
        ProjectTask.remove({id: task.id, project_id: project_id}, function() {
            Helpers.removeById($scope.project_tasks, task.id);

            //Gantt.redraw($scope.project_tasks);
        });
    };

    $scope.newOrEdit = function (task, parent_task_id){
        //Добавляет или редактирует задачу или подзадачу
        //Если задача передана(task) - то редактируем её
        //Если нет - то создаем новую задачу в текущем проекте
        //Если вместе с задачей(task) передан id родительской задачи(parent_task_id)
        //то задача добавляется подзадачей в родительскую

        var task_id;
        if(task)
            task_id = task.id;

        var modalInstance = $modal.open({
            animation: true,
            templateUrl: '<%= asset_path('angular/modules/projects/templates/modals/project-task-form.html') %>',
            controller: 'ProjectsTasksFormCtrl',
            //size: size,
            resolve: {
                inputs: function(){
                    return {
                        project_id: project_id,
                        task_id: task_id,
                        parent_task_id: parent_task_id
                    };
                }
            }
        });

        modalInstance.result.then(function (result) {
            //Если редактировали существущую задачу
            if(task_id){
                getTasks();
            } else {
                //Если это задача не является подзадачей
                if(!parent_task_id){
                    //добавляем её в проект
                    Helpers.addOrReplace($scope.project_tasks, result, task_id, true);
                }
                else{
                    //иначе, добавляем её в родительскую задачу
                    Helpers.addItemToParentObjectInArrayById($scope.project_tasks, result, parent_task_id, 'child_tasks');
                }
            }

            //Gantt.redraw($scope.project_tasks);
        }, function () {
            //$log.info('Modal dismissed at: ' + new Date());
        });
    };
    $scope.getSubTasks = function (parent_task){
        parent_task.child_tasks = ProjectTask.query({project_id: project_id, parent_task_id: parent_task.id });
    }
}]);
app.controller('ProjectsTasksFormCtrl', ['$scope', 'ProjectTask', 'ProjectStatus', 'Contact', '$modalInstance', 'inputs', 'Helpers', function($scope, ProjectTask, ProjectStatus, Contact, $modalInstance, inputs, Helpers) {
    $scope.task = {
        project_id: inputs.project_id,
        parent_task_id: inputs.parent_task_id,
        resources: []
    };
    $scope.responsible = $scope.contacts = [];

    if(inputs.task_id){
        ProjectTask.get(inputs.task_id).then(function(task){
            angular.extend($scope.task, task);
            console.log(task)
        })
    }

    ProjectStatus.query().$promise.then(function(statuses){
        $scope.statuses = statuses;
    });

    Contact.query({limit:50}).then(function(contacts){
        $scope.responsible = $scope.contacts = contacts;
    });

    $scope.refreshResponsible = function(q, selected) {
        return Contact.query({q: q, limit:50}).then(function(contacts){
            $scope.responsible = contacts.filter(function(contact){
                return selected.indexOf(contact.id) == -1;
            });
        });
    };

    $scope.save = function() {
        $scope.$broadcast('show-errors-check-validity');
        if (!$scope.taskForm.$valid) {
            return;
        }
        $scope.task.project_status = $scope.statuses.filter(function(obj){
            return obj.id == $scope.task.project_status_id;
        })[0];

        var obj;
        //если id нет - значит это новая задача
        if(!$scope.task.id)
            obj = new ProjectTask($scope.task).create();
        else
            obj = new ProjectTask($scope.task).update();

        obj.then(function success (result){
            var task = result.resource ? result.resource : result;

            $modalInstance.close(task);
        },
        function error (info){
            $scope.errors = info.data.errors;
        });
    }
}]);